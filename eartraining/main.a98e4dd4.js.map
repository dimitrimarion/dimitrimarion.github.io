{"version":3,"sources":["src/Frequency.js","src/Oscillator.js","main.js"],"names":["Frequency","freqRange","freqToGuess","freqValue","random","bound","Math","floor","prototype","fillFreqRange","maxFreq","step","Array","from","keys","map","x","slice","fillFreqToGuess","nbGuess","freqSet","Set","size","add","length","setFreqValue","Oscillator","type","frequency","audioCtx","AudioContext","oscillatorNode","oscillatorStarted","init","createOscillator","setValueAtTime","currentTime","connect","destination","disconnect","start","setFrequency","onPlay","MAX_FREQ","STEP","NB_GUESS","oscillator","buttonControlPlay","document","querySelector","addEventListener","classList","contains","pause","guessButtons","querySelectorAll","setButtonFreq","guesses","onGuess","redoButton","entries","button","textContent","remove","event","target","String","updateFreq","redo"],"mappings":"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","file":"main.a98e4dd4.js","sourceRoot":"..","sourcesContent":["'use strict'\r\n\r\nfunction Frequency() {\r\n    this.freqRange = []\r\n    this.freqToGuess = [];\r\n    this.freqValue = 0;\r\n}\r\n\r\n// Create an array filled with keys created from Array.from => [0, 1, 2, ..., 50]\r\n// Then multiply each element by STEP => [0, 100, 200,... , 4900, 5000]\r\n// And remove the first element\r\n// [100, 200, ..., 4900, 5000]\r\nFrequency.prototype.fillFreqRange = function(maxFreq, step) {\r\n    this.freqRange = Array.from(Array(maxFreq/step +1).keys()).map(x => x*step).slice(1);\r\n}\r\n\r\n// Use a set to avoid duplicate freq\r\nFrequency.prototype.fillFreqToGuess = function(nbGuess) {\r\n    let freqSet = new Set();\r\n    \r\n    while (freqSet.size != nbGuess) {\r\n        freqSet.add(this.freqRange[random(this.freqRange.length)]);\r\n    }\r\n\r\n    this.freqToGuess = [...freqSet];\r\n}\r\n\r\nFrequency.prototype.setFreqValue = function() {\r\n    this.freqValue = this.freqToGuess[random(this.freqToGuess.length)];\r\n}\r\n\r\nfunction random(bound) {\r\n    return Math.floor(Math.random()*bound);\r\n}\r\n\r\nexport default Frequency;","'use strict'\r\n\r\nfunction Oscillator(type, frequency) {\r\n    this.audioCtx = new AudioContext();\r\n    this.oscillatorNode = null;\r\n    this.type = type;\r\n    this.frequency = frequency;\r\n    this.oscillatorStarted = false;\r\n}\r\n\r\nOscillator.prototype.init = function() {\r\n    this.oscillatorNode = this.audioCtx.createOscillator();\r\n    this.oscillatorNode.type = this.type;\r\n    this.oscillatorNode.frequency.setValueAtTime(this.frequency, this.audioCtx.currentTime); \r\n}\r\n\r\nOscillator.prototype.connect = function() {\r\n    this.oscillatorNode.connect(this.audioCtx.destination);\r\n}\r\n\r\nOscillator.prototype.disconnect = function() {\r\n    this.oscillatorNode.disconnect(this.audioCtx.destination);\r\n}\r\n\r\nOscillator.prototype.start = function() {\r\n    this.oscillatorNode.start();\r\n}\r\n\r\nOscillator.prototype.setFrequency = function (frequency) {\r\n    this.oscillatorNode.frequency.setValueAtTime(frequency, this.audioCtx.currentTime);\r\n}\r\n\r\nOscillator.prototype.onPlay = function () {\r\n\r\n    this.connect();\r\n\r\n    if (!this.oscillatorStarted) {\r\n        this.start();\r\n        this.oscillatorStarted = true;\r\n    }  \r\n}\r\n\r\nexport default Oscillator;","'use strict'\r\n\r\nimport Frequency from './src/Frequency';\r\nimport Oscillator from './src/Oscillator';\r\n\r\nconst MAX_FREQ = 5000;\r\nconst STEP = 100;\r\nconst NB_GUESS = 4;\r\n\r\nconst frequency = new Frequency();\r\nfrequency.fillFreqRange(MAX_FREQ, STEP);\r\nfrequency.fillFreqToGuess(NB_GUESS);\r\nfrequency.setFreqValue();\r\n\r\nconst oscillator = new Oscillator('sine', frequency.freqValue);\r\noscillator.init();\r\n\r\nconst buttonControlPlay = document.querySelector(\".control-play\");\r\nbuttonControlPlay.addEventListener('click', function () {\r\n    if (buttonControlPlay.classList.contains(\"paused\")) {\r\n        pause();\r\n    } else {\r\n        buttonControlPlay.classList.add(\"paused\");\r\n        oscillator.onPlay();\r\n    }\r\n});\r\n\r\nconst guessButtons = document.querySelectorAll(\".guess\");\r\nsetButtonFreq();\r\n\r\nconst guesses = document.querySelector(\".guesses\");\r\nguesses.addEventListener('mousedown', onGuess);\r\n\r\nconst redoButton = document.querySelector(\".redo\");\r\nredoButton.addEventListener('click', redo);\r\n\r\nfunction setButtonFreq() {\r\n    for (let button of guessButtons.entries()) {\r\n        button[1].textContent = frequency.freqToGuess[button[0]];\r\n    }\r\n}\r\n\r\nfunction pause () {\r\n    buttonControlPlay.classList.remove(\"paused\");\r\n    oscillator.disconnect();\r\n}\r\n\r\nfunction onGuess(event) {\r\n    if (buttonControlPlay.classList.contains(\"paused\")) {\r\n        pause();\r\n    }\r\n\r\n    if (event.target.textContent === String(frequency.freqValue)) {\r\n        event.target.classList.add(\"correct\");\r\n    } else {\r\n        event.target.classList.add(\"wrong\");\r\n        for (let button of guessButtons) {\r\n            if (button.textContent === String(frequency.freqValue)) {\r\n                button.classList.add(\"correct\");\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateFreq() {\r\n    frequency.fillFreqToGuess(NB_GUESS);\r\n    frequency.setFreqValue();\r\n    setButtonFreq();\r\n\r\n    oscillator.setFrequency(frequency.freqValue);\r\n}\r\n\r\nfunction redo() {\r\n    updateFreq();\r\n\r\n    for (let button of guessButtons) {\r\n        button.classList.remove(\"correct\");\r\n        button.classList.remove(\"wrong\");  \r\n    }\r\n}"]}